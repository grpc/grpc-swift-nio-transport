// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// An integration test service that covers all the method signature permutations
/// of unary/streaming requests/responses.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: grpc/testing/benchmark_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - grpc.testing.BenchmarkService

/// Namespace containing generated types for the "grpc.testing.BenchmarkService" service.
internal enum Grpc_Testing_BenchmarkService {
    /// Service descriptor for the "grpc.testing.BenchmarkService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "grpc.testing.BenchmarkService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "UnaryCall" metadata.
        internal enum UnaryCall {
            /// Request type for "UnaryCall".
            internal typealias Input = Grpc_Testing_SimpleRequest
            /// Response type for "UnaryCall".
            internal typealias Output = Grpc_Testing_SimpleResponse
            /// Descriptor for "UnaryCall".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "grpc.testing.BenchmarkService"),
                method: "UnaryCall"
            )
        }
        /// Namespace for "StreamingCall" metadata.
        internal enum StreamingCall {
            /// Request type for "StreamingCall".
            internal typealias Input = Grpc_Testing_SimpleRequest
            /// Response type for "StreamingCall".
            internal typealias Output = Grpc_Testing_SimpleResponse
            /// Descriptor for "StreamingCall".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "grpc.testing.BenchmarkService"),
                method: "StreamingCall"
            )
        }
        /// Namespace for "StreamingFromClient" metadata.
        internal enum StreamingFromClient {
            /// Request type for "StreamingFromClient".
            internal typealias Input = Grpc_Testing_SimpleRequest
            /// Response type for "StreamingFromClient".
            internal typealias Output = Grpc_Testing_SimpleResponse
            /// Descriptor for "StreamingFromClient".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "grpc.testing.BenchmarkService"),
                method: "StreamingFromClient"
            )
        }
        /// Namespace for "StreamingFromServer" metadata.
        internal enum StreamingFromServer {
            /// Request type for "StreamingFromServer".
            internal typealias Input = Grpc_Testing_SimpleRequest
            /// Response type for "StreamingFromServer".
            internal typealias Output = Grpc_Testing_SimpleResponse
            /// Descriptor for "StreamingFromServer".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "grpc.testing.BenchmarkService"),
                method: "StreamingFromServer"
            )
        }
        /// Namespace for "StreamingBothWays" metadata.
        internal enum StreamingBothWays {
            /// Request type for "StreamingBothWays".
            internal typealias Input = Grpc_Testing_SimpleRequest
            /// Response type for "StreamingBothWays".
            internal typealias Output = Grpc_Testing_SimpleResponse
            /// Descriptor for "StreamingBothWays".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "grpc.testing.BenchmarkService"),
                method: "StreamingBothWays"
            )
        }
        /// Descriptors for all methods in the "grpc.testing.BenchmarkService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            UnaryCall.descriptor,
            StreamingCall.descriptor,
            StreamingFromClient.descriptor,
            StreamingFromServer.descriptor,
            StreamingBothWays.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "grpc.testing.BenchmarkService" service.
    internal static let grpc_testing_BenchmarkService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "grpc.testing.BenchmarkService")
}

// MARK: grpc.testing.BenchmarkService (server)

extension Grpc_Testing_BenchmarkService {
    /// Streaming variant of the service protocol for the "grpc.testing.BenchmarkService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "UnaryCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > One request followed by one response.
        /// > The server returns the client payload as-is.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Grpc_Testing_SimpleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Grpc_Testing_SimpleResponse` messages.
        func unaryCall(
            request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>

        /// Handle the "StreamingCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Repeated sequence of one request followed by one response.
        /// > Should be called streaming ping-pong
        /// > The server returns the client payload as-is on each response
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Grpc_Testing_SimpleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Grpc_Testing_SimpleResponse` messages.
        func streamingCall(
            request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>

        /// Handle the "StreamingFromClient" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from client to server
        /// > The server returns the client payload as-is once the client does WritesDone
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Grpc_Testing_SimpleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Grpc_Testing_SimpleResponse` messages.
        func streamingFromClient(
            request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>

        /// Handle the "StreamingFromServer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from server to client
        /// > The server repeatedly returns the client payload as-is
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Grpc_Testing_SimpleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Grpc_Testing_SimpleResponse` messages.
        func streamingFromServer(
            request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>

        /// Handle the "StreamingBothWays" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Two-sided unbounded streaming between server to client
        /// > Both sides send the content of their own choice to the other
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Grpc_Testing_SimpleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Grpc_Testing_SimpleResponse` messages.
        func streamingBothWays(
            request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>
    }

    /// Service protocol for the "grpc.testing.BenchmarkService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Grpc_Testing_BenchmarkService.StreamingServiceProtocol {
        /// Handle the "UnaryCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > One request followed by one response.
        /// > The server returns the client payload as-is.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Grpc_Testing_SimpleRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Grpc_Testing_SimpleResponse` message.
        func unaryCall(
            request: GRPCCore.ServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Grpc_Testing_SimpleResponse>

        /// Handle the "StreamingCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Repeated sequence of one request followed by one response.
        /// > Should be called streaming ping-pong
        /// > The server returns the client payload as-is on each response
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Grpc_Testing_SimpleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Grpc_Testing_SimpleResponse` messages.
        func streamingCall(
            request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>

        /// Handle the "StreamingFromClient" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from client to server
        /// > The server returns the client payload as-is once the client does WritesDone
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Grpc_Testing_SimpleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Grpc_Testing_SimpleResponse` message.
        func streamingFromClient(
            request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Grpc_Testing_SimpleResponse>

        /// Handle the "StreamingFromServer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from server to client
        /// > The server repeatedly returns the client payload as-is
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Grpc_Testing_SimpleRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Grpc_Testing_SimpleResponse` messages.
        func streamingFromServer(
            request: GRPCCore.ServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>

        /// Handle the "StreamingBothWays" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Two-sided unbounded streaming between server to client
        /// > Both sides send the content of their own choice to the other
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Grpc_Testing_SimpleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Grpc_Testing_SimpleResponse` messages.
        func streamingBothWays(
            request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>
    }

    /// Simple service protocol for the "grpc.testing.BenchmarkService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Grpc_Testing_BenchmarkService.ServiceProtocol {
        /// Handle the "UnaryCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > One request followed by one response.
        /// > The server returns the client payload as-is.
        ///
        /// - Parameters:
        ///   - request: A `Grpc_Testing_SimpleRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Grpc_Testing_SimpleResponse` to respond with.
        func unaryCall(
            request: Grpc_Testing_SimpleRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Grpc_Testing_SimpleResponse

        /// Handle the "StreamingCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Repeated sequence of one request followed by one response.
        /// > Should be called streaming ping-pong
        /// > The server returns the client payload as-is on each response
        ///
        /// - Parameters:
        ///   - request: A stream of `Grpc_Testing_SimpleRequest` messages.
        ///   - response: A response stream of `Grpc_Testing_SimpleResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func streamingCall(
            request: GRPCCore.RPCAsyncSequence<Grpc_Testing_SimpleRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Grpc_Testing_SimpleResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "StreamingFromClient" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from client to server
        /// > The server returns the client payload as-is once the client does WritesDone
        ///
        /// - Parameters:
        ///   - request: A stream of `Grpc_Testing_SimpleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Grpc_Testing_SimpleResponse` to respond with.
        func streamingFromClient(
            request: GRPCCore.RPCAsyncSequence<Grpc_Testing_SimpleRequest, any Swift.Error>,
            context: GRPCCore.ServerContext
        ) async throws -> Grpc_Testing_SimpleResponse

        /// Handle the "StreamingFromServer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from server to client
        /// > The server repeatedly returns the client payload as-is
        ///
        /// - Parameters:
        ///   - request: A `Grpc_Testing_SimpleRequest` message.
        ///   - response: A response stream of `Grpc_Testing_SimpleResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func streamingFromServer(
            request: Grpc_Testing_SimpleRequest,
            response: GRPCCore.RPCWriter<Grpc_Testing_SimpleResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "StreamingBothWays" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Two-sided unbounded streaming between server to client
        /// > Both sides send the content of their own choice to the other
        ///
        /// - Parameters:
        ///   - request: A stream of `Grpc_Testing_SimpleRequest` messages.
        ///   - response: A response stream of `Grpc_Testing_SimpleResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func streamingBothWays(
            request: GRPCCore.RPCAsyncSequence<Grpc_Testing_SimpleRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Grpc_Testing_SimpleResponse>,
            context: GRPCCore.ServerContext
        ) async throws
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Grpc_Testing_BenchmarkService.StreamingServiceProtocol {
    internal func registerMethods(with router: inout GRPCCore.RPCRouter) {
        router.registerHandler(
            forMethod: Grpc_Testing_BenchmarkService.Method.UnaryCall.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleResponse>(),
            handler: { request, context in
                try await self.unaryCall(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Grpc_Testing_BenchmarkService.Method.StreamingCall.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleResponse>(),
            handler: { request, context in
                try await self.streamingCall(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Grpc_Testing_BenchmarkService.Method.StreamingFromClient.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleResponse>(),
            handler: { request, context in
                try await self.streamingFromClient(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Grpc_Testing_BenchmarkService.Method.StreamingFromServer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleResponse>(),
            handler: { request, context in
                try await self.streamingFromServer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Grpc_Testing_BenchmarkService.Method.StreamingBothWays.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleResponse>(),
            handler: { request, context in
                try await self.streamingBothWays(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Grpc_Testing_BenchmarkService.ServiceProtocol {
    internal func unaryCall(
        request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse> {
        let response = try await self.unaryCall(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func streamingFromClient(
        request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse> {
        let response = try await self.streamingFromClient(
            request: request,
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func streamingFromServer(
        request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse> {
        let response = try await self.streamingFromServer(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Grpc_Testing_BenchmarkService.SimpleServiceProtocol {
    internal func unaryCall(
        request: GRPCCore.ServerRequest<Grpc_Testing_SimpleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Grpc_Testing_SimpleResponse> {
        return GRPCCore.ServerResponse<Grpc_Testing_SimpleResponse>(
            message: try await self.unaryCall(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func streamingCall(
        request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse> {
        return GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>(
            metadata: [:],
            producer: { writer in
                try await self.streamingCall(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func streamingFromClient(
        request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Grpc_Testing_SimpleResponse> {
        return GRPCCore.ServerResponse<Grpc_Testing_SimpleResponse>(
            message: try await self.streamingFromClient(
                request: request.messages,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func streamingFromServer(
        request: GRPCCore.ServerRequest<Grpc_Testing_SimpleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse> {
        return GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>(
            metadata: [:],
            producer: { writer in
                try await self.streamingFromServer(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func streamingBothWays(
        request: GRPCCore.StreamingServerRequest<Grpc_Testing_SimpleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse> {
        return GRPCCore.StreamingServerResponse<Grpc_Testing_SimpleResponse>(
            metadata: [:],
            producer: { writer in
                try await self.streamingBothWays(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }
}

// MARK: grpc.testing.BenchmarkService (client)

extension Grpc_Testing_BenchmarkService {
    /// Generated client protocol for the "grpc.testing.BenchmarkService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "UnaryCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > One request followed by one response.
        /// > The server returns the client payload as-is.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Grpc_Testing_SimpleRequest` message.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func unaryCall<Result>(
            request: GRPCCore.ClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StreamingCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Repeated sequence of one request followed by one response.
        /// > Should be called streaming ping-pong
        /// > The server returns the client payload as-is on each response
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Grpc_Testing_SimpleRequest` messages.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func streamingCall<Result>(
            request: GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StreamingFromClient" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from client to server
        /// > The server returns the client payload as-is once the client does WritesDone
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Grpc_Testing_SimpleRequest` messages.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func streamingFromClient<Result>(
            request: GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StreamingFromServer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from server to client
        /// > The server repeatedly returns the client payload as-is
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Grpc_Testing_SimpleRequest` message.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func streamingFromServer<Result>(
            request: GRPCCore.ClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StreamingBothWays" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Two-sided unbounded streaming between server to client
        /// > Both sides send the content of their own choice to the other
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Grpc_Testing_SimpleRequest` messages.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func streamingBothWays<Result>(
            request: GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "grpc.testing.BenchmarkService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "UnaryCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > One request followed by one response.
        /// > The server returns the client payload as-is.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Grpc_Testing_SimpleRequest` message.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func unaryCall<Result>(
            request: GRPCCore.ClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Grpc_Testing_BenchmarkService.Method.UnaryCall.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StreamingCall" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Repeated sequence of one request followed by one response.
        /// > Should be called streaming ping-pong
        /// > The server returns the client payload as-is on each response
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Grpc_Testing_SimpleRequest` messages.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func streamingCall<Result>(
            request: GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Grpc_Testing_BenchmarkService.Method.StreamingCall.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StreamingFromClient" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from client to server
        /// > The server returns the client payload as-is once the client does WritesDone
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Grpc_Testing_SimpleRequest` messages.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func streamingFromClient<Result>(
            request: GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.clientStreaming(
                request: request,
                descriptor: Grpc_Testing_BenchmarkService.Method.StreamingFromClient.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StreamingFromServer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Single-sided unbounded streaming from server to client
        /// > The server repeatedly returns the client payload as-is
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Grpc_Testing_SimpleRequest` message.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func streamingFromServer<Result>(
            request: GRPCCore.ClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Grpc_Testing_BenchmarkService.Method.StreamingFromServer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StreamingBothWays" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Two-sided unbounded streaming between server to client
        /// > Both sides send the content of their own choice to the other
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Grpc_Testing_SimpleRequest` messages.
        ///   - serializer: A serializer for `Grpc_Testing_SimpleRequest` messages.
        ///   - deserializer: A deserializer for `Grpc_Testing_SimpleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func streamingBothWays<Result>(
            request: GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>,
            serializer: some GRPCCore.MessageSerializer<Grpc_Testing_SimpleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Grpc_Testing_SimpleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Grpc_Testing_BenchmarkService.Method.StreamingBothWays.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Grpc_Testing_BenchmarkService.ClientProtocol {
    /// Call the "UnaryCall" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > One request followed by one response.
    /// > The server returns the client payload as-is.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Grpc_Testing_SimpleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func unaryCall<Result>(
        request: GRPCCore.ClientRequest<Grpc_Testing_SimpleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.unaryCall(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamingCall" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Repeated sequence of one request followed by one response.
    /// > Should be called streaming ping-pong
    /// > The server returns the client payload as-is on each response
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Grpc_Testing_SimpleRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamingCall<Result>(
        request: GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.streamingCall(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamingFromClient" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Single-sided unbounded streaming from client to server
    /// > The server returns the client payload as-is once the client does WritesDone
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Grpc_Testing_SimpleRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamingFromClient<Result>(
        request: GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.streamingFromClient(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamingFromServer" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Single-sided unbounded streaming from server to client
    /// > The server repeatedly returns the client payload as-is
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Grpc_Testing_SimpleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamingFromServer<Result>(
        request: GRPCCore.ClientRequest<Grpc_Testing_SimpleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.streamingFromServer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamingBothWays" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Two-sided unbounded streaming between server to client
    /// > Both sides send the content of their own choice to the other
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Grpc_Testing_SimpleRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamingBothWays<Result>(
        request: GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.streamingBothWays(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Grpc_Testing_SimpleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Grpc_Testing_SimpleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Grpc_Testing_BenchmarkService.ClientProtocol {
    /// Call the "UnaryCall" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > One request followed by one response.
    /// > The server returns the client payload as-is.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func unaryCall<Result>(
        _ message: Grpc_Testing_SimpleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Grpc_Testing_SimpleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.unaryCall(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamingCall" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Repeated sequence of one request followed by one response.
    /// > Should be called streaming ping-pong
    /// > The server returns the client payload as-is on each response
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamingCall<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Grpc_Testing_SimpleRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.streamingCall(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamingFromClient" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Single-sided unbounded streaming from client to server
    /// > The server returns the client payload as-is once the client does WritesDone
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamingFromClient<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Grpc_Testing_SimpleRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.streamingFromClient(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamingFromServer" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Single-sided unbounded streaming from server to client
    /// > The server repeatedly returns the client payload as-is
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamingFromServer<Result>(
        _ message: Grpc_Testing_SimpleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Grpc_Testing_SimpleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.streamingFromServer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StreamingBothWays" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Two-sided unbounded streaming between server to client
    /// > Both sides send the content of their own choice to the other
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func streamingBothWays<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Grpc_Testing_SimpleRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Grpc_Testing_SimpleResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Grpc_Testing_SimpleRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.streamingBothWays(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}